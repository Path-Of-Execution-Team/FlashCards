version: "3.9"

services:
  postgres:
    image: postgres:16
    environment:
      POSTGRES_DB: flashcards
      POSTGRES_USER: flashcards_user
      POSTGRES_PASSWORD: changeMeStrong123
    volumes:
      - pg_data:/var/lib/postgresql/data
    ports: ["5432:5432"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 20

  kafka:
    image: bitnami/kafka:3.7
    environment:
      KAFKA_ENABLE_KRAFT: "yes"
      KAFKA_CFG_NODE_ID: "1"
      KAFKA_CFG_PROCESS_ROLES: "broker,controller"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_LISTENERS: "INTERNAL://:9092,EXTERNAL://:9094,CONTROLLER://:9093"
      KAFKA_CFG_ADVERTISED_LISTENERS: "INTERNAL://kafka:9092,EXTERNAL://localhost:9094"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT"
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_HEAP_OPTS: "-Xms512m -Xmx512m"
    volumes:
      - kafka_data:/bitnami/kafka
    ports:
      - "9094:9094"   # host używa 9094; wewnątrz kontenerów dalej 9092
    healthcheck:
      test: ["CMD-SHELL", "unset JMX_PORT; kafka-broker-api-versions.sh --bootstrap-server localhost:9092 >/dev/null 2>&1 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 30
    ulimits:
      nofile:
        soft: 100000
        hard: 100000

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8082:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    depends_on:
      - kafka

  prometheus:
    image: prom/prometheus:latest
    command: ["--config.file=/etc/prometheus/prometheus.yml","--storage.tsdb.path=/prometheus"]
    volumes:
      - ./compose/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prom_data:/prometheus
    ports: ["9090:9090"]
    depends_on: [backend, hosted]

  loki:
    image: grafana/loki:2.9.4
    command: ["-config.file=/etc/loki/loki-config.yml"]
    volumes:
      - ./compose/loki/loki-config.yml:/etc/loki/loki-config.yml:ro
      - loki_data:/loki
    ports: ["3100:3100"]

  promtail:
    image: grafana/promtail:2.9.4
    command: ["-config.file=/etc/promtail/promtail.yml"]
    volumes:
      - ./compose/promtail/promtail.yml:/etc/promtail/promtail.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/log:/var/log
      - promtail_positions:/run/promtail

  grafana:
    image: grafana/grafana:10.4.2
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: changeMeGrafana123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./compose/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
    ports: ["3001:3000"]
    depends_on: [prometheus, loki]

  backend:
    build:
      context: ./source/FlashCardsBackend
      dockerfile: Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: dev
      SERVER_PORT: 8080
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/flashcards
      SPRING_DATASOURCE_USERNAME: flashcards_user
      SPRING_DATASOURCE_PASSWORD: changeMeStrong123
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      ALLOWED_ORIGINS: http://localhost:3000-http://localhost:8080
    ports: ["8080:8080"]
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy

  hosted:
    build:
      context: ./source/FlashCardsHostedServices
      dockerfile: Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: dev
      SERVER_PORT: 8081
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    ports: ["8081:8081"]
    depends_on: [kafka]

  frontend:
    build:
      context: ./source/FlashCardsGUI
      dockerfile: Dockerfile
    environment:
      NEXT_PUBLIC_API_BASE_URL: http://localhost:8080
      LOKI_PUSH_URL: http://loki:3100/loki/api/v1/push
      APP_NAME: frontend
      METRICS_PREFIX: frontend_
    ports: ["3000:3000"]
    depends_on: [backend]

volumes:
  pg_data: {}
  prom_data: {}
  loki_data: {}
  grafana_data: {}
  promtail_positions: {}
  kafka_data: {}

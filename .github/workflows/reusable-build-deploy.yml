name: Reusable Build & Deploy

on:
  workflow_call:
    inputs:
      image_name:
        required: true
        type: string
      deployment_name:
        required: true
        type: string
      dockerfile:
        required: true
        type: string
      build_context:
        required: true
        type: string
      container_name:
        required: false
        type: string
        default: app
      platforms:
        required: false
        type: string
        default: linux/amd64,linux/arm64
    secrets:
      VPS_HOST:
        required: true
      VPS_USER:
        required: true
      VPS_SSH_KEY:
        required: true
      GHCR_USERNAME:
        required: true
      GHCR_TOKEN:
        required: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ inputs.image_name }}
      SHORT_SHA: ${{ github.sha }}
      BRANCH: ${{ github.ref_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set IMAGE TAGS
        id: tags
        run: |
          SHA_TAG="sha-${SHORT_SHA}"
          if [ "${BRANCH}" = "main" ]; then
            MOVING_TAG="prod"
            TARGET_NS="prod"
          elif [ "${BRANCH}" = "dev" ]; then
            MOVING_TAG="dev"
            TARGET_NS="dev"
          else
            MOVING_TAG=""
            TARGET_NS=""
          fi
          echo "sha_tag=${SHA_TAG}" >> $GITHUB_OUTPUT
          echo "moving_tag=${MOVING_TAG}" >> $GITHUB_OUTPUT
          echo "target_ns=${TARGET_NS}" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build & Push image
        uses: docker/build-push-action@v6
        with:
          context: ${{ inputs.build_context }}
          file: ${{ inputs.dockerfile }}
          platforms: linux/arm64
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.tags.outputs.sha_tag }}
            ${{ steps.tags.outputs.moving_tag && format('{0}:{1}', env.IMAGE_NAME, steps.tags.outputs.moving_tag) || '' }}
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.run_id }}

      - name: Deploy (only for main/dev)
        if: ${{ steps.tags.outputs.target_ns != '' }}
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script_stop: true
          script: |
            set -euo pipefail
            export KUBECONFIG=/home/${USER}/kubeconfig
            NAMESPACE="${{ steps.tags.outputs.target_ns }}"
            DEPLOY="${{ inputs.deployment_name }}"
            IMAGE="${{ env.IMAGE_NAME }}:${{ steps.tags.outputs.sha_tag }}"
            echo "Patching $DEPLOY in ns $NAMESPACE to image $IMAGE"
            CONTAINER="${{ inputs.container_name }}"
            PAIR="${CONTAINER}=${IMAGE}"
            sudo kubectl -n "$NAMESPACE" set image deployment/"$DEPLOY" "$PAIR" --record
            echo "Waiting for rollout..."
            sudo kubectl -n "$NAMESPACE" rollout status deployment/"$DEPLOY" --timeout=120s
